import argparse
import torch

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--split", dest='split', default='')
    parser.add_argument("--train", type=str)
    parser.add_argument('--transformer_bs', dest='transformer_bs', type=int, default=1024)
    parser.add_argument('--transformer_save', dest='transformer_save', type=str)
    parser.add_argument('--transformer_lr', dest='transformer_lr', type=float)
    parser.add_argument('--transformer_start', dest='transformer_start', type=int, default=1)
    parser.add_argument('--transformer_path', dest='transformer_path', type=str)
    parser.add_argument('--predictor_path', dest='predictor_path', type=str)
    parser.add_argument('--beam_size', dest='beam_size', type=int)
    parser.add_argument('--executor_save', dest='executor_save', type=str)
    parser.add_argument('--executor_lr', dest='executor_lr', type=float)
    parser.add_argument('--executor_start', dest='executor_start', type=int)
    parser.add_argument('--executor_path', dest='executor_path', type=str)
    parser.add_argument('--data_bs', dest='data_bs', type=int, default=1024)
    parser.add_argument("--data", dest='data')
    parser.add_argument("--save", dest='save')
    parser.add_argument("--lr", dest='lr', type=float)
    parser.add_argument("--bs", dest='bs', type=int, default=1024)
    parser.add_argument("--ae_mode", dest='ae_mode', type=str)
    parser.add_argument('--executor_bs', dest='executor_bs', type=int, default=1024)
    parser.add_argument('--disable_cuda', dest='disable_cuda', type=bool, default=False)
    parser.add_argument('--end_end', dest='end_end', type=bool, default='') # empty for false
    parser.add_argument('--end_end_RL', dest='end_end_RL', type=bool, default='')
    parser.add_argument('--data_path', dest='data_path', type=str, default='Visual_reasoning')
    parser.add_argument('--features_path', dest='features_path', type=str, default='datasets/GQA/data')
    parser.add_argument('--ft_path', dest='ft_path', type=str, default='datasets/GQA/data')
    parser.add_argument('--argument_type', dest='argument_type', type=str, default='lxmert')
    parser.add_argument('--features', dest='features', type=str, default='lxmert')
    parser.add_argument('--data_size', dest='data_size', type=int, default=None)
    parser.add_argument('--load_select', dest='load_select', type=str, default=None)
    parser.add_argument('--functions', dest='functions', type=str, default='coordinates')
    parser.add_argument('--select_2', dest='select_2', type=str, default='True')
    parser.add_argument('--use_ae', dest='use_ae', type=bool, default='')
    parser.add_argument('--seed', dest='seed', type=int)
    parser.add_argument('--weighting', dest='weighting', type=str, default='[1,1,1]')
    parser.add_argument('--module_weighting', dest='module_weighting', type=str, default='answer_module_freq')
    parser.add_argument('--use_CL', dest='use_CL', type=bool, default='')
    parser.add_argument('--use_ssh', dest='use_ssh', type=bool, default='')
    parser.add_argument('--use_validity_mat', dest='use_validity_mat', type=bool, default='')
    parser.add_argument('--CL_iter', dest='CL_iter', type=int, default=1)
    parser.add_argument('--baseline_random', dest='baseline_random', type=str, default='')
    parser.add_argument('--dont_forget', dest='dont_forget', type=bool, default='')
    parser.add_argument('--CL_repeat', dest='CL_repeat', type=bool, default='')
    parser.add_argument('--CL_pretrain', dest='CL_pretrain', type=bool, default='')
    parser.add_argument('--CL_no_len_layouts', dest='CL_no_len_layouts', type=bool, default='')
    parser.add_argument('--use_coordinates', dest='use_coordinates', type=bool, default='')
    parser.add_argument('--predictor_start', dest='predictor_start', type=int, default=None)

    parser.add_argument('--epoch', dest='epoch')
    parser.add_argument('--inter_sup', dest='inter_sup', type=bool, default='')
    parser.add_argument('--loss_reduction', dest='loss_reduction', type=str, default='sum')
    parser.add_argument('--use_tf', dest='use_tf', type=bool, default='')
    parser.add_argument('--tgt_att_type', dest='tgt_att_type', type=str, default='hard')
    parser.add_argument('--tf_step', dest='tf_step', type=float, default=0.1)

    parser.add_argument('--get_losses', dest='get_losses', type=bool, default='')
    parser.add_argument('--get_outputs', dest='get_outputs', type=bool, default='')
    # args = parser.parse_args()
    args, unknown = parser.parse_known_args()
    print('args: ', args, 'unknown: ', unknown)
    if not args.disable_cuda and torch.cuda.is_available():
        args.device = torch.device('cuda')
    else:
        args.device = torch.device('cpu')
    return args

args = parse_args()
